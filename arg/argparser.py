import argparse


def get_args():

    parser = argparse.ArgumentParser(description='PyTorch ImageNet Attack Evaluation')

    parser.add_argument('--input_dir', default='./SubImageNet224', help='the path of original dataset')
    parser.add_argument('--output_dir', default='./save', help='the path of the saved dataset')
    parser.add_argument('--arch', default='resnet18', help='source model for black-box attack evaluation')
    parser.add_argument('--batch-size', type=int, default=100, metavar='N', help='input batch size for adversarial attack')
    parser.add_argument('--no-cuda', action='store_true', default=False, help='disables CUDA training')
    parser.add_argument('--epsilon', default=16, type=float, help='perturbation')
    parser.add_argument('--num-steps', default=10, type=int, help='perturb number of steps')
    parser.add_argument('--step-size', default=2, type=float, help='perturb step size')
    parser.add_argument('--gamma', default=0.5, type=float)
    parser.add_argument('--momentum', default=0.0, type=float)
    parser.add_argument('--print_freq', default=10, type=int)
    parser.add_argument('--input-dir', default='', help='Input directory with images.')
    parser.add_argument('--output-dir', default='', help='Output directory with images.')
    parser.add_argument('--arch', default='densenet201', help='source model', choices=model_names)
    parser.add_argument('--batch-size', type=int, default=128, metavar='N', help='input batch size for adversarial attack')
    parser.add_argument('--no-cuda', action='store_true', default=False, help='disables CUDA training')
    parser.add_argument('--epsilon', default=16, type=float, help='perturbation')
    parser.add_argument('--num-steps', default=10, type=int, help='perturb number of steps')
    parser.add_argument('--step-size', default=2, type=float, help='perturb step size')
    parser.add_argument('--gamma', default=1.0, type=float)
    parser.add_argument('--momentum', default=0.0, type=float)
    parser.add_argument('--print-freq', '-p', default=10, type=int, metavar='N', help='print frequency (default: 10)')
    parser.add_argument('--batch-size', type=int, default=128, metavar='N', help='input batch size for training (default: 128)')
    parser.add_argument('--test-batch-size', type=int, default=100, metavar='N', help='input batch size for testing (default: 100)')
    parser.add_argument('--epochs', type=int, default=120, metavar='N', help='number of epochs to train')
    parser.add_argument('--weight-decay', '--wd', default=3.5e-3, type=float, metavar='W')
    parser.add_argument('--lr', type=float, default=0.01, metavar='LR', help='learning rate')
    parser.add_argument('--momentum', type=float, default=0.9, metavar='M', help='SGD momentum')
    parser.add_argument('--no-cuda', action='store_true', default=False, help='disables CUDA training')
    parser.add_argument('--epsilon', default=0.031, help='perturbation')
    parser.add_argument('--num-steps', default=10, help='perturb number of steps')
    parser.add_argument('--step-size', default=0.007, help='perturb step size')
    parser.add_argument('--beta', default=5.0, help='weight before kl (misclassified examples)')
    parser.add_argument('--seed', type=int, default=1, metavar='S', help='random seed (default: 1)')
    parser.add_argument('--log-interval', type=int, default=100, metavar='N', help='how many batches to wait before logging training status')
    parser.add_argument('--model', default='resnet', help='directory of model for saving checkpoint')
    parser.add_argument('--save-freq', '-s', default=1, type=int, metavar='N', help='save frequency')
    parser.add_argument('--batch-size', type=int, default=128, metavar='N', help='input batch size for training (default: 128)')
    parser.add_argument('--test-batch-size', type=int, default=100, metavar='N', help='input batch size for testing (default: 100)')
    parser.add_argument('--epochs', type=int, default=90, metavar='N', help='number of epochs to train')
    parser.add_argument('--weight-decay', '--wd', default=7e-4, type=float, metavar='W')
    parser.add_argument('--lr', type=float, default=0.1, metavar='LR', help='learning rate')
    parser.add_argument('--momentum', type=float, default=0.9, metavar='M', help='SGD momentum')
    parser.add_argument('--no-cuda', action='store_true', default=False, help='disables CUDA training')
    parser.add_argument('--epsilon', default=0.031, help='perturbation')
    parser.add_argument('--num-steps', default=10, help='perturb number of steps')
    parser.add_argument('--step-size', default=0.007, help='perturb step size')
    parser.add_argument('--beta', default=6.0, help='weight before kl (misclassified examples)')
    parser.add_argument('--seed', type=int, default=1, metavar='S', help='random seed (default: 1)')
    parser.add_argument('--log-interval', type=int, default=100, metavar='N', help='how many batches to wait before logging training status')
    parser.add_argument('--model', default='wideresnet', help='directory of model for saving checkpoint')
    parser.add_argument('--save-freq', '-s', default=1, type=int, metavar='N', help='save frequency')
    
    parser.add_argument('--model', default='PreActResNet18')
    parser.add_argument('--l2', default=0, type=float)
    parser.add_argument('--l1', default=0, type=float)
    parser.add_argument('--batch-size', default=128, type=int)
    parser.add_argument('--batch-size-test', default=128, type=int)
    parser.add_argument('--data-dir', default='../cifar-data', type=str)
    parser.add_argument('--epochs', default=200, type=int)
    parser.add_argument('--lr-schedule', default='piecewise', choices=['superconverge', 'piecewise', 'linear', 'piecewisesmoothed', 'piecewisezoom', 'onedrop', 'multipledecay', 'cosine', 'cyclic'])
    parser.add_argument('--lr-max', default=0.1, type=float)
    parser.add_argument('--lr-one-drop', default=0.01, type=float)
    parser.add_argument('--lr-drop-epoch', default=100, type=int)
    parser.add_argument('--attack', default='pgd', type=str, choices=['pgd', 'fgsm', 'free', 'none'])
    parser.add_argument('--epsilon', default=8, type=int)
    parser.add_argument('--attack-iters', default=10, type=int)
    parser.add_argument('--attack-iters-test', default=20, type=int)
    parser.add_argument('--restarts', default=1, type=int)
    parser.add_argument('--pgd-alpha', default=2, type=float)
    parser.add_argument('--fgsm-alpha', default=1.25, type=float)
    parser.add_argument('--norm', default='l_inf', type=str, choices=['l_inf', 'l_2'])
    parser.add_argument('--fgsm-init', default='random', choices=['zero', 'random', 'previous'])
    parser.add_argument('--fname', default='cifar_model', type=str)
    parser.add_argument('--seed', default=0, type=int)
    parser.add_argument('--half', action='store_true')
    parser.add_argument('--width-factor', default=10, type=int)
    parser.add_argument('--resume', default=0, type=int)
    parser.add_argument('--cutout', action='store_true')
    parser.add_argument('--cutout-len', type=int)
    parser.add_argument('--mixup', action='store_true')
    parser.add_argument('--mixup-alpha', type=float)
    parser.add_argument('--eval', action='store_true')
    parser.add_argument('--val', action='store_true')
    parser.add_argument('--chkpt-iters', default=10, type=int)
    parser.add_argument('--awp-gamma', default=0.01, type=float)
    parser.add_argument('--awp-warmup', default=0, type=int)

    parser.add_argument('--epochs', type=int, default=120, metavar='N', help='number of epochs to train')
    parser.add_argument('--arch', type=str, default="resnet18", help="decide which network to use,choose from smallcnn, resnet18, WRN")
    parser.add_argument('--dataset', type=str, default="cifar10", help="dataset")
    parser.add_argument('--num_classes', type=int, default=10)
    parser.add_argument('--lr', default=0.01, type=float)
    parser.add_argument('--device', default='cuda:0', type=str, help='Which GPU to use')

    parser.add_argument('--loss_fn', type=str, default="cent", help="loss function")
    parser.add_argument('--epsilon', type=float, default=0.031, help='perturbation bound')
    parser.add_argument('--num-steps', type=int, default=10, help='maximum perturbation step K')
    parser.add_argument('--step-size', type=float, default=0.007, help='step size')
    parser.add_argument('--norm', type=str, default='Linf', help='type of attack')

    parser.add_argument('--resume',type=bool, default=False, help='whether to resume training')
    parser.add_argument('--out-dir',type=str, default='./logs',help='dir of output')
    parser.add_argument('--ablation', type=str, default='', help='ablation study')


    args = parser.parse_args()
